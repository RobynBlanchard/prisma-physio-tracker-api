# import SessionOrderByInput, ExerciseOrderByInput, SetOrderByInput from './generated/prisma.graphql'

type Query {
  me: User!
  # users(query: String): [User!]
  sessions(
    first: Int
    skip: Int
    after: String
    orderBy: SessionOrderByInput
  ): [Session!]
  exercises(
    sessionID: ID
    first: Int
    skip: Int
    after: String
    orderBy: ExerciseOrderByInput
  ): [Exercise!]!
  sets(
    exerciseID: ID
    first: Int
    skip: Int
    after: String
    orderBy: SetOrderByInput
  ): [Set!]!
}

type Mutation {
  createUser(data: CreateUserInput): AuthPayload!
  deleteUser: User!
  updateUser(data: updateUserInput!): User!
  createSession(data: CreateSessionInput): Session!
  deleteSession(id: ID!): Session!
  updateSession(id: ID!, data: updateSessionInput!): Session!
  createExercise(data: CreateExerciseInput): Exercise!
  deleteExercise(id: ID!): Exercise!
  updateExercise(id: ID!, data: updateExerciseInput): Exercise!
  createSet(data: CreateSetInput): Set!
  deleteSet(id: ID!): Set!
  updateSet(id: ID!, data: updateSetInput): Set!
  login(data: LoginUserInput!): AuthPayload!
}

type Subscription {
  exercise(sessionId: ID!): ExerciseSubscriptionPayload!
  session: SessionSubscriptionPayload!
}

type AuthPayload {
  token: String!
  user: User!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input updateUserInput {
  name: String
  email: String
}

input CreateSessionInput {
  date: String!
}

input updateSessionInput {
  date: String
}

# TODO: change to left leg right leg
enum ExerciseName {
  LEG_PRESS_RIGHT_LEG
  LEG_PRESS_LEFT_LEG
  LEG_PRESS_BOTH_LEGS
  HAMSTRING_CURL_RIGHT_LEG
  HAMSTRING_CURL_LEFT_LEG
  HAMSTRING_CURL_BOTH_LEGS
  TREADMILL
  SPINNING_BIKE
  SQUAT
  DEADLIFT
}

input CreateExerciseInput {
  name: ExerciseName!
  session: ID!
}

input updateExerciseInput {
  name: String
}

input updateSetInput {
  distance: Float
  time: Float
  reps: Float
  weight: Float
}

input CreateSetInput {
  exercise: ID!
  distance: Float
  time: Float
  reps: Float
  weight: Float
}

input LoginUserInput {
  email: String!
  password: String!
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  sessions: [Session!]!
  exercises: [Exercise!]!
}

type Session {
  id: ID!
  date: String!
  user: User!
  exercises: [Exercise!]!
}

type Exercise {
  id: ID!
  name: ExerciseName!
  user: User!
  session: Session!
}

# Hack to get around prisma not implementing interfaces yet
type Set {
  id: ID!
  user: User!
  session: Session!
  exercise: Exercise!

  reps: Int
  weight: Float

  distance: Float
  time: Float
}

# interface Set {
#   id: ID!
#   user: User!
#   session: Session!
#   exercise: Exercise!

#   reps: Int
#   weight: Float

#   distance: Float
#   time: Float
# }

# type WeightsSet implements Set {
#   id: ID!
#   user: User!
#   session: Session!
#   exercise: Exercise!
#   reps: Int
#   weight: Float
# }

# type TimeDistanceSet implements Set {
#   id: ID!
#   user: User!
#   session: Session!
#   exercise: Exercise!
#   distance: Float
#   time: Float
# }

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type SessionSubscriptionPayload {
  mutation: MutationType!
  node: Session
}

type ExerciseSubscriptionPayload {
  mutation: MutationType!
  node: Exercise
}
