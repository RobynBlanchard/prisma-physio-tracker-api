type User {
  id: ID! @id
  name: String!
  email: String! @unique
  password: String!
  sessions: [Session!]! @relation(name: "SessionToUser", onDelete: CASCADE)
  exercises: [Exercise!]! @relation(name: "ExerciseToUser", onDelete: CASCADE)
  sets: [Set!]! @relation(name: "SetToUser", onDelete: CASCADE)
  updatedAt: DateTime! @updatedAt
  createdAt: DateTime! @createdAt
}

type Session {
  id: ID! @id
  date: DateTime! # could add custom dateTime type
  user: User! @relation(name: "SessionToUser", onDelete: SET_NULL)
  exercises: [Exercise!]!
    @relation(name: "ExerciseToSession", onDelete: CASCADE)
  sets: [Set!]! @relation(name: "SetToSession", onDelete: CASCADE)
  updatedAt: DateTime! @updatedAt
  createdAt: DateTime! @createdAt
}

enum ExerciseName {
  LEG_PRESS_RIGHT_LEG
  LEG_PRESS_LEFT_LEG
  LEG_PRESS_BOTH_LEGS
  HAMSTRING_CURL_RIGHT_LEG
  HAMSTRING_CURL_LEFT_LEG
  HAMSTRING_CURL_BOTH_LEGS
  TREADMILL
  SPINNING_BIKE
  SQUAT
  DEADLIFT
}

type Exercise {
  id: ID! @id
  name: ExerciseName!
  user: User! @relation(name: "ExerciseToUser", onDelete: SET_NULL)
  session: Session! @relation(name: "ExerciseToSession", onDelete: SET_NULL)
  sets: [Set!]! @relation(name: "SetToExercise", onDelete: CASCADE)
  updatedAt: DateTime! @updatedAt
  createdAt: DateTime! @createdAt
}

type Set {
  id: ID! @id
  user: User! @relation(name: "SetToUser", onDelete: SET_NULL)
  session: Session! @relation(name: "SetToSession", onDelete: SET_NULL)
  exercise: Exercise! @relation(name: "SetToExercise", onDelete: SET_NULL)
  updatedAt: DateTime! @updatedAt
  createdAt: DateTime! @createdAt

  # Custom fields WeightsSet
  reps: Int
  weight: Float

  # Custom fields TimeDistanceSet
  distance: Float
  time: Float
}

# interface Set {
#   id: ID! @id
#   user: User! @relation(name: "SetToUser", onDelete: SET_NULL)
#   session: Session! @relation(name: "SetToSession", onDelete: SET_NULL)
#   exercise: Exercise! @relation(name: "SetToExercise", onDelete: SET_NULL)
#   updatedAt: DateTime! @updatedAt
#   createdAt: DateTime! @createdAt
# }

# type WeightsSet implements Set {
#   id: ID! @id
#   user: User! @relation(name: "SetToUser", onDelete: SET_NULL)
#   session: Session! @relation(name: "SetToSession", onDelete: SET_NULL)
#   exercise: Exercise! @relation(name: "SetToExercise", onDelete: SET_NULL)
#   reps: Int
#   weight: Float
#   updatedAt: DateTime! @updatedAt
#   createdAt: DateTime! @createdAt
# }

# type TimeDistanceSet implements Set {
#   id: ID! @unique
#   user: User! @relation(name: "SetToUser", onDelete: SET_NULL)
#   session: Session! @relation(name: "SetToSession", onDelete: SET_NULL)
#   exercise: Exercise! @relation(name: "SetToExercise", onDelete: SET_NULL)
#   distance: Float
#   time: Float
#   updatedAt: DateTime! @updatedAt
#   createdAt: DateTime! @createdAt
# }

# TODO: deploy this
# then create node client

# TODO: enum for Exercise name
